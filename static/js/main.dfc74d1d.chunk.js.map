{"version":3,"sources":["css/cs.module.css","common.js","EventDisplay.js","Event.js","PostEvent.js","Keys.js","ShowEventsFC.js","serviceWorker.js","index.js"],"names":["module","exports","Common","dateString","undefined","elements","split","length","date","getDay","maxId","counter","EventDisplay","event","this","objectId","group","description","type","eventDate","Date","day","GetDay","Event","PostEvent","key","token","user","value","Keys","ShowEventsFC","useState","events","setEvents","source","setSource","newGroup","setNewGroup","newDate","setNewDate","newDescription","setNewDescription","newType","setNewType","setKey","setToken","setUser","isShowNewEvent","setIsShowNewEvent","isShowDebug","setIsShowDebug","isShowInfo","setIsShowInfo","displayInfo","styles","displayInitial","displayNone","displayNewEvent","displayDebug","groupName","groupNameDisplay","site","window","location","href","urlBase","includes","LocalMoment","element","format","useEffect","retrieveKeys","localStorage","getItem","keys","JSON","parse","url","fetch","then","res","json","data","values","newEvents","today","setHours","forEach","eventDisplay","push","sort","a","b","catch","console","log","className","button","onClick","fieldset","reload","inputField","inputFieldLabel","onChange","target","setItem","stringify","setKeys","newHelpDate","parts","UTC","newEvent","toISOString","concat","onAdd","postEvent","myHeaders","Headers","append","method","body","onSave","map","id","updatedEvents","filter","onDelete","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.dfc74d1d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"event\":\"cs_event__2tDr_\",\"group\":\"cs_group__1-hdn\",\"id\":\"cs_id__3BMVs\",\"date\":\"cs_date__1dYKo\",\"day\":\"cs_day__1PdK7\",\"description\":\"cs_description__3EtTf\",\"type\":\"cs_type__3nZ3J\",\"button\":\"cs_button__3EpXZ\",\"inputFieldLabel\":\"cs_inputFieldLabel__MYFiI\",\"inputField\":\"cs_inputField__1Lwoq\",\"fieldset\":\"cs_fieldset__3vDl5\",\"debug\":\"cs_debug__21WGv\",\"displayNone\":\"cs_displayNone__3XO6Z\",\"displayInitial\":\"cs_displayInitial__1aZto\"};","class Common {\r\n  static InverseDateString(dateString){\r\n    if(dateString === undefined){\r\n      return null;\r\n    }\r\n\r\n    let elements = dateString.split('-');\r\n    if(elements.length !== 3){\r\n      return null;\r\n    }\r\n    return `${elements[2]}-${elements[1]}-${elements[0]}`;\r\n  }\r\n\r\n  static GetDay(date){\r\n    const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\r\n    //let days = ['Zondag', 'Maandag', 'Dinsdag', 'Woensdag', 'Donderdag', 'Vrijdag', 'Zaterdag'];\r\n    return days[date.getDay()];\r\n  }\r\n}\r\n\r\nexport default Common;","import Common from './common.js';\r\n\r\nfunction maxId() {\r\n\r\n  if( typeof maxId.counter == 'undefined' ) {\r\n      maxId.counter = 0;\r\n  }\r\n  maxId.counter++;\r\n  return maxId.counter;\r\n}\r\n\r\nclass EventDisplay {\r\n  constructor(event) {\r\n    this.objectId = maxId();\r\n    this.group = event.group;\r\n    this.date = event.date;\r\n    this.description = event.description;\r\n    this.type = event.type;\r\n    let eventDate = new Date(event.date);\r\n    this.day = Common.GetDay(eventDate);\r\n  }\r\n}\r\n\r\nexport default EventDisplay;","class Event {\r\n  constructor(group, date, description, type) {\r\n    this.group = group;\r\n    this.date = date;\r\n    this.description = description;\r\n    this.type = type;\r\n  }\r\n}\r\n\r\nexport default Event;","class PostEvent {\r\n  constructor(key, token, user, value) {\r\n    this.key = key;\r\n    this.token = token;\r\n    this.user = user;\r\n    this.value = value;\r\n  }\r\n}\r\n\r\nexport default PostEvent;","class Keys {\r\n  constructor(key, token, user) {\r\n    this.key = key;\r\n    this.token = token;\r\n    this.user = user;\r\n  }\r\n}\r\n\r\nexport default Keys;","/*jshint esversion: 6 */\r\nimport React, { useState, useEffect } from 'react';\r\nimport Moment from 'react-moment';\r\nimport EventDisplay from './EventDisplay';\r\nimport Event from './Event';\r\nimport PostEvent from './PostEvent';\r\nimport styles from './css/cs.module.css';\r\nimport Keys from './Keys';\r\n\r\nconst ShowEventsFC = () =>  {\r\n  const [events, setEvents] = useState([]);\r\n  const [source, setSource] = useState(\"\");\r\n  const [newGroup, setNewGroup] = useState(\"\");\r\n  const [newDate, setNewDate] = useState(\"\");\r\n  const [newDescription, setNewDescription] = useState(\"\");\r\n  const [newType, setNewType] = useState(\"\");\r\n  const [key, setKey] = useState(\"\");\r\n  const [token, setToken] = useState(\"\");\r\n  const [user, setUser] = useState(\"\");\r\n  const [isShowNewEvent, setIsShowNewEvent] = useState(false);\r\n  const [isShowDebug, setIsShowDebug] = useState(false);\r\n  const [isShowInfo, setIsShowInfo] = useState(false);\r\n  \r\n  let displayInfo = isShowInfo ? styles.displayInitial : styles.displayNone;\r\n  let displayNewEvent = isShowNewEvent ? styles.displayInitial : styles.displayNone;\r\n  let displayDebug = isShowDebug ? styles.displayInitial : styles.displayNone;\r\n  let groupName = null;\r\n  let groupNameDisplay = null;\r\n    \r\n  const site = window.location.href;\r\n  let urlBase = \"https://www.odusseus.org/php/item\";\r\n  if (site.includes(\"localhost\")){\r\n    urlBase = \"http://localhost:9000\";\r\n  }\r\n\r\n  const LocalMoment = (element) => {\r\n    let newDate = new Date(element.date);\r\n    return <Moment format = 'DD-MM-YYYY'>{newDate}</Moment>;\r\n  }\r\n\r\n  const onAdd = () => {\r\n    let newHelpDate  = new Date();\r\n    if( newDate !== '') {\r\n      const parts = newDate.split('-');\r\n      if(parts.length === 3){\r\n        // save as UTC time\r\n        newHelpDate = new Date(Date.UTC(parts[2], parts[1] - 1, parts[0]));\r\n      }\r\n    }\r\n    newHelpDate.setHours(0,0,0,0);\r\n\r\n    let newEvent = new Event(newGroup,\r\n                             newHelpDate.toISOString(),\r\n                             newDescription,\r\n                            newType);\r\n    let eventDisplay = new EventDisplay(newEvent);\r\n\r\n    let newEvents = events.concat(eventDisplay);\r\n    newEvents.sort(\r\n      (a, b) => \r\n      ( \r\n        new Date(a.date) - new Date(b.date)\r\n        ));\r\n      \r\n    setEvents(newEvents);\r\n  }\r\n\r\n  const onDelete = (id) => {\r\n    const isNotId = event => event.objectId !== id;\r\n    const updatedEvents = events.filter(isNotId);\r\n    setEvents(updatedEvents);\r\n  }\r\n\r\n  const toggleShowDebug = () => {\r\n    let newIsShowDebug = isShowDebug ? false : true;\r\n    setIsShowDebug(newIsShowDebug);\r\n  }\r\n\r\n  const setKeys = () => {\r\n    let keys = new Keys(key, token, user);\r\n    localStorage.setItem('keys', JSON.stringify(keys));\r\n  }\r\n\r\n  const toggleIsShowInfo = () => {\r\n    setSource(urlBase);\r\n\r\n    let newIsShowInfo = isShowInfo ? false : true;\r\n    setIsShowInfo(newIsShowInfo);\r\n  };\r\n\r\n  const toggleIsShowNewEvent = () => {\r\n    let newIsShowNewEvent = isShowNewEvent ? false : true;\r\n    setIsShowNewEvent(newIsShowNewEvent);\r\n  }\r\n\r\n  const onSave = () => {\r\n    let site = window.location.href;\r\n    const retrieveKeys = localStorage.getItem('keys');\r\n    let keys = JSON.parse(retrieveKeys);\r\n\r\n    if (site.includes(\"localhost\")){\r\n      if((!keys \r\n          || keys.key === \"\"\r\n          || keys.token === \"\")\r\n          && !keys.user) {\r\n      keys = new Keys(\"4265AC3D-DD4B-427C-8BFD-6D7E7BB92C09\", \r\n                      \"testToken\",\r\n                      keys.user);\r\n      }\r\n    }\r\n    \r\n    let urlBase = \"https://www.odusseus.org/php/item\";\r\n    // Site run localy and you will use the local Api.\r\n    const isApiLocal = true;\r\n    if (site.includes(\"localhost\") && isApiLocal){\r\n      urlBase = \"http://localhost:9000\";\r\n    }\r\n    \r\n    let url = urlBase + \"/postitem.php\";\r\n    let value = JSON.stringify(events);\r\n    let postEvent = new PostEvent(keys.key, keys.token, keys.user, value);\r\n\r\n    let myHeaders = new Headers();\r\n    myHeaders.append('Accept', 'application/json');\r\n    myHeaders.append('Content-Type', 'application/json');\r\n\r\n  fetch(url, {\r\n      method: 'POST', \r\n      body: JSON.stringify(postEvent)\r\n      }\r\n    ).then(res => res.json())\r\n    .then((data)=> {\r\n      let keys = new Keys(data.key, data.token, user);\r\n      localStorage.setItem('keys', JSON.stringify(keys));\r\n      setKey(keys.key);\r\n      setToken(keys.token);\r\n    })\r\n    .catch(console.log);\r\n}\r\n\r\n  useEffect(() => {\r\n    const retrieveKeys = localStorage.getItem('keys');\r\n    let keys = JSON.parse(retrieveKeys);\r\n    if(!keys){\r\n      keys = new Keys(\"\",\"\",\"\");\r\n      if (site.includes(\"localhost\")){\r\n        keys.key = \"4265AC3D-DD4B-427C-8BFD-6D7E7BB92C09\";\r\n        keys.token = \"testToken\";\r\n      }\r\n    }\r\n    setKey(keys.key);\r\n    setToken(keys.token);\r\n    setUser(keys.user);\r\n    \r\n    let urlBase = \"https://www.odusseus.org/php/item\";\r\n    if (site.includes(\"localhost\")){\r\n      urlBase = \"http://localhost:9000\";\r\n    }\r\n    let url = urlBase + \"/getitem.php?key=\" + keys.key + \"&token=\" + keys.token;\r\n    \r\n    setSource(urlBase);\r\n    fetch(url)\r\n    .then(res => res.json())\r\n    .then((data) => {\r\n        let values = JSON.parse(data.value);\r\n        let newEvents = [];\r\n        let today = new Date();\r\n        today.setHours(0,0,0,0);\r\n        values.forEach(element => {\r\n          if(new Date(element.date) >= today){\r\n            let eventDisplay = new EventDisplay(element);\r\n            newEvents.push(eventDisplay);\r\n          }            \r\n        });\r\n          newEvents.sort(\r\n            (a, b) => \r\n            ( \r\n              new Date(a.date) - new Date(b.date)\r\n              ));\r\n\r\n          setEvents(newEvents);\r\n    })\r\n    .catch(console.log);\r\n  }, []); \r\n\r\n  return (\r\n      <>\r\n        <nav>\r\n          <ul>\r\n            <li>\r\n            <div className={styles.button}>\r\n              <button onClick={ () => toggleIsShowInfo() }>Info</button>\r\n            </div>\r\n            </li>\r\n            <li>\r\n              <div className={styles.button}>\r\n              <button onClick={ () => toggleIsShowNewEvent() }>New</button>\r\n              </div>\r\n            </li>            \r\n          </ul>\r\n        </nav>\r\n        <div className={displayInfo}>\r\n          <fieldset className={styles.fieldset}>\r\n            <legend>Info</legend>\r\n            <div>Events (23-10-2019) v2.0.1 API = {source}</div>            \r\n            <div className={styles.button}>\r\n              <button onClick={ () => toggleShowDebug() }>Debug</button>\r\n            </div>\r\n            <div className={styles.button}>\r\n              <button className={styles.button} onClick={ () => window.location.reload()}>Reload</button>\r\n            </div>\r\n            <div className={styles.inputField}>\r\n              <label className={styles.inputFieldLabel}> \r\n                User\r\n              </label>\r\n              <input className={styles.inputField} type=\"text\" value={user} onChange={event => setUser(event.target.value)}/>\r\n            </div>\r\n            <div className={styles.inputField}>\r\n              <label className={styles.inputFieldLabel}> \r\n                Key\r\n              </label>\r\n              <input className={styles.inputField} type=\"text\" value={key} onChange={event => setKey(event.target.value)}/>\r\n            </div>\r\n            <div className={styles.inputField}>\r\n              <label className={styles.inputFieldLabel}> \r\n                Token\r\n              </label>\r\n              <input className={styles.inputField} type=\"text\" value={token} onChange={event => setToken(event.target.value)}/>\r\n            </div>\r\n            <div className={styles.button}>\r\n              <button onClick={ () => setKeys() }>Save Keys</button>\r\n            </div>\r\n          </fieldset>\r\n        </div>\r\n        <div className={displayNewEvent}>\r\n          <fieldset className={styles.fieldset}>\r\n              <legend>New event</legend>\r\n              <div className={styles.inputField}>\r\n                <label className={styles.inputFieldLabel}> \r\n                  Group\r\n                </label>\r\n                <input className={styles.inputField} type=\"text\" value={newGroup} onChange={event => setNewGroup(event.target.value)}/>\r\n              </div>\r\n              <div className={styles.inputField}>\r\n                <label className={styles.inputFieldLabel}> \r\n                  Date\r\n                </label>\r\n                <input className={styles.inputField} type=\"text\" value={newDate} onChange={event => setNewDate(event.target.value)} />\r\n              </div>\r\n              <div className={styles.inputField}>\r\n                <label className={styles.inputFieldLabel}> \r\n                  Description\r\n                </label>\r\n                <input className={styles.inputField} type=\"text\" value={newDescription} onChange={event => setNewDescription(event.target.value)} />\r\n              </div>\r\n              <div className={styles.inputField}>\r\n                <label className={styles.inputFieldLabel}> \r\n                  Type\r\n                </label>\r\n                <input className={styles.inputField} type=\"text\" value={newType} onChange={event => setNewType(event.target.value)} />\r\n               </div>\r\n               <div className={styles.button}>\r\n                  <button onClick={ () => onAdd() }>Add</button>\r\n                </div>\r\n                <div className={styles.button}>\r\n                  <button onClick={ () => onSave() }>Save</button>\r\n                </div>                   \r\n              </fieldset>\r\n        </div>\r\n        <div className={displayDebug}>\r\n          <fieldset className={styles.fieldset}>\r\n            <legend>Debug</legend>\r\n              <div>Info:</div>\r\n          </fieldset>\r\n        </div>\r\n        <div>\r\n            {\r\n              events.map(\r\n                event => {                  \r\n                  if(groupName !== event.group){\r\n                    groupName = event.group;\r\n                    groupNameDisplay = `For ${event.group}`;\r\n                  }\r\n                  else\r\n                  {\r\n                    groupNameDisplay = '';\r\n                  }\r\n\r\n                  return (\r\n                   <div className={styles.event} key={event.objectId}>\r\n                    <div className={styles.group}>\r\n                      {groupNameDisplay}\r\n                    </div>\r\n                    <div className={styles.id} >\r\n                      {event.objectId}\r\n                    </div>\r\n                    <div className={styles.day}>\r\n                      {event.day}\r\n                    </div>\r\n                    <div className={styles.date}>\r\n                    {\r\n                      <LocalMoment date={event.date} />\r\n                    }\r\n                    </div>\r\n                    <div className={styles.description}>\r\n                      {event.description}\r\n                    </div>\r\n                    <div className={styles.type}>\r\n                      {event.type}\r\n                    </div>\r\n                    <div className={styles.button}>\r\n                      <button onClick={ () => onDelete(event.objectId) }>Delete</button>\r\n                    </div>                    \r\n                  </div>\r\n                  );\r\n                }\r\n              )\r\n            }\r\n        </div>\r\n      </>\r\n    );\r\n}\r\n  \r\nexport default ShowEventsFC;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n//import App from './App';\nimport ShowEvents from './ShowEventsFC';\n//import ShowEvents from './ShowEvents';\n//import ShowEventsTest from './ShowEventsTest';\n//import AddTest from './AddTest';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <ShowEvents />,\n  document.getElementById('root'));\n    \n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
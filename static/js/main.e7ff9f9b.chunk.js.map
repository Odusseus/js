{"version":3,"sources":["css/cs.module.css","common.js","EventDisplay.js","Event.js","PostEvent.js","Keys.js","ShowEvents.js","serviceWorker.js","index.js"],"names":["module","exports","Common","dateString","undefined","elements","split","length","date","getDay","maxId","counter","EventDisplay","event","this","objectId","group","description","type","eventDate","Date","day","GetDay","Event","PostEvent","key","token","value","Keys","LocalMoment","element","newDate","format","ShowEvents","props","state","events","source","newGroup","newDescription","newType","isShowNewEvent","isShowDebug","isShowInfo","onDelete","bind","onChangeGroup","onChangeDate","onChangeDescription","onChangeType","onChangeKey","onChangeToken","onAdd","onSave","onReload","setIsShowNewEvent","setIsShowDebug","setIsShowInfo","id","updatedEvents","filter","setState","target","parts","UTC","setHours","newEvent","toISOString","eventDisplay","newEvents","concat","sort","a","b","site","window","location","href","retrieveKeys","localStorage","getItem","keys","JSON","parse","includes","urlBase","url","stringify","postEvent","myHeaders","Headers","append","fetch","method","body","then","res","json","data","setItem","catch","console","log","reload","values","today","forEach","push","groupName","groupNameDisplay","displayNewEvent","styles","displayInitial","displayNone","displayDebug","displayInfo","className","button","onClick","fieldset","inputField","inputFieldLabel","onChange","setKeys","map","Component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e7ff9f9b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"event\":\"cs_event__2tDr_\",\"group\":\"cs_group__1-hdn\",\"id\":\"cs_id__3BMVs\",\"date\":\"cs_date__1dYKo\",\"day\":\"cs_day__1PdK7\",\"description\":\"cs_description__3EtTf\",\"type\":\"cs_type__3nZ3J\",\"button\":\"cs_button__3EpXZ\",\"inputFieldLabel\":\"cs_inputFieldLabel__MYFiI\",\"inputField\":\"cs_inputField__1Lwoq\",\"fieldset\":\"cs_fieldset__3vDl5\",\"debug\":\"cs_debug__21WGv\",\"displayNone\":\"cs_displayNone__3XO6Z\",\"displayInitial\":\"cs_displayInitial__1aZto\"};","class Common {\r\n  static InverseDateString(dateString){\r\n    if(dateString === undefined){\r\n      return null;\r\n    }\r\n\r\n    let elements = dateString.split('-');\r\n    if(elements.length !== 3){\r\n      return null;\r\n    }\r\n    return `${elements[2]}-${elements[1]}-${elements[0]}`;\r\n  }\r\n\r\n  static GetDay(date){\r\n    const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\r\n    //let days = ['Zondag', 'Maandag', 'Dinsdag', 'Woensdag', 'Donderdag', 'Vrijdag', 'Zaterdag'];\r\n    return days[date.getDay()];\r\n  }\r\n}\r\n\r\nexport default Common;","import Common from './common.js';\r\n\r\nfunction maxId() {\r\n\r\n  if( typeof maxId.counter == 'undefined' ) {\r\n      maxId.counter = 0;\r\n  }\r\n  maxId.counter++;\r\n  return maxId.counter;\r\n}\r\n\r\nclass EventDisplay {\r\n  constructor(event) {\r\n    this.objectId = maxId();\r\n    this.group = event.group;\r\n    this.date = event.date;\r\n    this.description = event.description;\r\n    this.type = event.type;\r\n    let eventDate = new Date(event.date);\r\n    this.day = Common.GetDay(eventDate);\r\n  }\r\n}\r\n\r\nexport default EventDisplay;","class Event {\r\n  constructor(group, date, description, type) {\r\n    this.group = group;\r\n    this.date = date;\r\n    this.description = description;\r\n    this.type = type;\r\n  }\r\n}\r\n\r\nexport default Event;","class PostEvent {\r\n  constructor(key, token, value) {\r\n    this.key = key;\r\n    this.token = token;\r\n    this.value = value;\r\n  }\r\n}\r\n\r\nexport default PostEvent;","class Keys {\r\n  constructor(key, token) {\r\n    this.key = key;\r\n    this.token = token;\r\n  }\r\n}\r\n\r\nexport default Keys;","/*jshint esversion: 6 */\r\nimport React, { Component } from 'react';\r\nimport Moment from 'react-moment';\r\nimport EventDisplay from './EventDisplay';\r\nimport Event from './Event';\r\nimport PostEvent from './PostEvent';\r\nimport styles from './css/cs.module.css';\r\nimport Keys from './Keys';\r\n\r\nclass ShowEvents extends Component {\r\n\r\n    constructor(props) {\r\n      super(props);\r\n\r\n      this.state = {\r\n        events: [],\r\n        source: \"\",\r\n        newGroup: \"\",\r\n        newDate: \"\",\r\n        newDescription: \"\",\r\n        newType: \"\",\r\n        key: \"\",\r\n        token:\"\",\r\n        isShowNewEvent: false,\r\n        isShowDebug: false,\r\n        isShowInfo: false\r\n      }\r\n\r\n      this.onDelete = this.onDelete.bind(this);\r\n      this.onChangeGroup = this.onChangeGroup.bind(this);\r\n      this.onChangeDate = this.onChangeDate.bind(this);\r\n      this.onChangeDescription = this.onChangeDescription.bind(this);\r\n      this.onChangeType = this.onChangeType.bind(this);\r\n      this.onChangeKey = this.onChangeKey.bind(this);\r\n      this.onChangeToken = this.onChangeToken.bind(this);\r\n      this.onAdd = this.onAdd.bind(this);\r\n      this.onSave = this.onSave.bind(this);\r\n      this.onReload = this.onReload.bind(this);\r\n      this.setIsShowNewEvent = this.setIsShowNewEvent.bind(this);\r\n      this.setIsShowDebug = this.setIsShowDebug.bind(this);\r\n      this.setIsShowInfo = this.setIsShowInfo.bind(this);\r\n    }\r\n\r\n    onDelete(id){\r\n      const isNotId = event => event.objectId !== id;\r\n      const updatedEvents = this.state.events.filter(isNotId);\r\n      this.setState({events: updatedEvents} );\r\n    }\r\n\r\n    onChangeGroup(event){\r\n      this.setState({newGroup: event.target.value});\r\n    }\r\n\r\n    onChangeDate(event){\r\n      this.setState({newDate: event.target.value});\r\n    }\r\n\r\n    onChangeDescription(event){\r\n      this.setState({newDescription: event.target.value});\r\n    }\r\n\r\n    onChangeType(event){\r\n      this.setState({newType: event.target.value});\r\n    }\r\n\r\n    onChangeKey(event){\r\n      this.setState({key: event.target.value});\r\n    }\r\n\r\n    onChangeToken(event){\r\n      this.setState({token: event.target.value});\r\n    }\r\n\r\n    onAdd(){\r\n      let newDate  = new Date();\r\n      if( this.state.newDate !== '') {\r\n        const parts = this.state.newDate.split('-');\r\n        if(parts.length === 3){\r\n          // save as UTC time\r\n          newDate = new Date(Date.UTC(parts[2], parts[1] - 1, parts[0]));\r\n        }\r\n      }\r\n      newDate.setHours(0,0,0,0);\r\n\r\n      let newEvent = new Event(this.state.newGroup,\r\n                               newDate.toISOString(),\r\n                               this.state.newDescription,\r\n                              this.state.newType);\r\n      let eventDisplay = new EventDisplay(newEvent);\r\n\r\n      let newEvents = this.state.events.concat(eventDisplay);\r\n      newEvents.sort(\r\n        (a, b) => \r\n        ( \r\n          new Date(a.date) - new Date(b.date)\r\n          ));\r\n        \r\n      this.setState({events: newEvents});\r\n    }\r\n\r\n    onSave(){\r\n            let site = window.location.href;\r\n            const retrieveKeys = localStorage.getItem('keys');\r\n            const keys = JSON.parse(retrieveKeys);\r\n            let key = '';\r\n            let token = '';\r\n            if(keys && keys.key && keys.token){\r\n              key = keys.key;\r\n              token = keys.token;\r\n            } else {\r\n              if (site.includes(\"localhost\")){\r\n                key = \"4265AC3D-DD4B-427C-8BFD-6D7E7BB92C09\";\r\n              }\r\n            }\r\n            \r\n            let urlBase = \"https://www.odusseus.org/php/item\";\r\n            if (true && site.includes(\"localhost\")){\r\n              urlBase = \"http://localhost:9000\";\r\n            }\r\n            \r\n            let url = urlBase + \"/postitem.php\";\r\n            let value = JSON.stringify(this.state.events);\r\n            let postEvent = new PostEvent(key, token, value);\r\n\r\n            let myHeaders = new Headers();\r\n            myHeaders.append('Accept', 'application/json');\r\n            myHeaders.append('Content-Type', 'application/json');\r\n\r\n          fetch(url, {\r\n              method: 'POST', \r\n              body: JSON.stringify(postEvent)\r\n              }\r\n            ).then(res => res.json())\r\n            .then((data)=> {\r\n              let keys = new Keys(data.key, data.token);\r\n              localStorage.setItem('keys', JSON.stringify(keys));\r\n              this.setState({key: data.key, token: data.token});\r\n            })\r\n            .catch(console.log);\r\n    }\r\n\r\n    setIsShowNewEvent()\r\n    {\r\n      let isShowNewEvent = this.state.isShowNewEvent ? false : true;\r\n      this.setState({isShowNewEvent: isShowNewEvent});\r\n    }\r\n\r\n    setIsShowDebug(){\r\n      let isShowDebug = this.state.isShowDebug ? false : true;\r\n      this.setState({isShowDebug: isShowDebug});\r\n    }\r\n\r\n    setIsShowInfo(){\r\n      let isShowInfo = this.state.isShowInfo ? false : true;\r\n      this.setState({isShowInfo: isShowInfo});\r\n    }\r\n\r\n    setKeys(){\r\n      let keys = new Keys(this.state.key, this.state.token);\r\n      localStorage.setItem('keys', JSON.stringify(keys));\r\n    }\r\n\r\n    onReload(){\r\n      window.location.reload();\r\n    }\r\n    componentDidMount() {\r\n      const retrieveKeys = localStorage.getItem('keys');\r\n      const keys = JSON.parse(retrieveKeys);\r\n      if(keys){\r\n        this.setState({key: keys.key, token: keys.token});\r\n      }\r\n      let site = window.location.href;\r\n      let key = '';\r\n      let token = '';\r\n      if(keys && keys.key && keys.token){\r\n        key = keys.key;\r\n        token = keys.token;\r\n      } else {        \r\n        if (site.includes(\"localhost\")){\r\n          key = \"4265AC3D-DD4B-427C-8BFD-6D7E7BB92C09\";\r\n        }\r\n      }\r\n      let urlBase = \"https://www.odusseus.org/php/item\";\r\n      if (site.includes(\"localhost\")){\r\n        urlBase = \"http://localhost:9000\";\r\n      }\r\n      let url = urlBase + \"/getitem.php?key=\" + key + \"&token=\" + token;\r\n      this.setState({ source: urlBase });\r\n      fetch(url)\r\n      .then(res => res.json())\r\n      .then((data) => {\r\n          let values = JSON.parse(data.value);\r\n          let newEvents = [];\r\n          let today = new Date();\r\n          today.setHours(0,0,0,0);\r\n          values.forEach(element => {\r\n            if(new Date(element.date) >= today){\r\n              let eventDisplay = new EventDisplay(element);\r\n              newEvents.push(eventDisplay);\r\n            }            \r\n          });\r\n            newEvents.sort(\r\n              (a, b) => \r\n              ( \r\n                new Date(a.date) - new Date(b.date)\r\n                ));\r\n\r\n            this.setState({ events: newEvents });\r\n      })\r\n      .catch(console.log);\r\n    } \r\n  render() {\r\n    let groupName = null;\r\n    let groupNameDisplay = null;\r\n    let displayNewEvent = this.state.isShowNewEvent ? styles.displayInitial : styles.displayNone;\r\n    let displayDebug = this.state.isShowDebug ? styles.displayInitial : styles.displayNone;\r\n    let displayInfo = this.state.isShowInfo ? styles.displayInitial : styles.displayNone;\r\n    return (\r\n      <>\r\n        <nav>\r\n          <ul>\r\n            <li>\r\n              <div className={styles.button}>\r\n              <button onClick={ () => this.setIsShowNewEvent() }>New</button>\r\n              </div>\r\n            </li>\r\n            <li>\r\n            <div className={styles.button}>\r\n              <button onClick={ () => this.setIsShowInfo() }>Info</button>\r\n            </div>\r\n            </li>            \r\n          </ul>\r\n        </nav>\r\n        <div className={displayInfo}>\r\n          <fieldset className={styles.fieldset}>\r\n            <legend>Info</legend>\r\n            <div>Events (23-102019) v1.2.0 from {this.state.source}</div>\r\n            <div className={styles.button}>\r\n              <button className={styles.button} onClick={ () => this.onReload() }>Reload</button>\r\n            </div>\r\n            <div className={styles.button}>\r\n              <button onClick={ () => this.setIsShowDebug() }>Debug</button>\r\n            </div>\r\n            \r\n            <div className={styles.inputField}>\r\n              <label className={styles.inputFieldLabel}> \r\n                Key\r\n              </label>\r\n              <input className={styles.inputField} type=\"text\" value={this.state.key} onChange={this.onChangeKey}/>\r\n            </div>\r\n            <div className={styles.inputField}>\r\n              <label className={styles.inputFieldLabel}> \r\n                Token\r\n              </label>\r\n              <input className={styles.inputField} type=\"text\" value={this.state.token} onChange={this.onChangeToken}/>\r\n            </div>\r\n            <div className={styles.button}>\r\n              <button onClick={ () => this.setKeys() }>Set Keys</button>\r\n            </div>\r\n          </fieldset>\r\n        </div>\r\n        <div className={displayNewEvent}>\r\n            <fieldset className={styles.fieldset}>\r\n              <legend>New event</legend>\r\n              <div className={styles.inputField}>\r\n                <label className={styles.inputFieldLabel}> \r\n                  Group\r\n                </label>\r\n                <input className={styles.inputField} type=\"text\" onChange={this.onChangeGroup}/>\r\n              </div>\r\n              <div className={styles.inputField}>\r\n                <label className={styles.inputFieldLabel}> \r\n                  Date\r\n                </label>\r\n                <input className={styles.inputField} type=\"text\" onChange={this.onChangeDate} />\r\n              </div>\r\n              <div className={styles.inputField}>\r\n                <label className={styles.inputFieldLabel}> \r\n                  Description\r\n                </label>\r\n                <input className={styles.inputField} type=\"text\" onChange={this.onChangeDescription} />\r\n              </div>\r\n              <div className={styles.inputField}>\r\n                <label className={styles.inputFieldLabel}> \r\n                  Type\r\n                </label>\r\n                <input className={styles.inputField} type=\"text\" onChange={this.onChangeType} />\r\n               </div>\r\n               <div className={styles.button}>\r\n                  <button onClick={ () => this.onAdd() }>Add</button>\r\n                </div>\r\n                <div className={styles.button}>\r\n                  <button onClick={ () => this.onSave() }>Save</button>\r\n                </div>                   \r\n              </fieldset>\r\n            <div className={displayDebug}>\r\n              <div>Group: {this.state.newGroup}</div>\r\n              <div>Date: {this.state.newDate}</div>\r\n              <div>Description: {this.state.newDescription}</div>\r\n              <div>Type: {this.state.newType}</div>\r\n            </div>\r\n        </div>\r\n        <div>\r\n            {\r\n              this.state.events.map(\r\n                event => {                  \r\n                  if(groupName !== event.group){\r\n                    groupName = event.group;\r\n                    groupNameDisplay = `For ${event.group}`;\r\n                  }\r\n                  else\r\n                  {\r\n                    groupNameDisplay = '';\r\n                  }\r\n\r\n                  return (\r\n                   <div className={styles.event} key={event.objectId}>\r\n                    <div className={styles.group}>\r\n                      {groupNameDisplay}\r\n                    </div>\r\n                    <div className={styles.id} >\r\n                      {event.objectId}\r\n                    </div>\r\n                    <div className={styles.day}>\r\n                      {event.day}\r\n                    </div>\r\n                    <div className={styles.date}>\r\n                    {\r\n                      <LocalMoment date={event.date} />\r\n                    }\r\n                    </div>\r\n                    <div className={styles.description}>\r\n                      {event.description}\r\n                    </div>\r\n                    <div className={styles.type}>\r\n                      {event.type}\r\n                    </div>\r\n                    <div className={styles.button}>\r\n                      <button onClick={ () => this.onDelete(event.objectId) }>Delete</button>\r\n                    </div>                    \r\n                  </div>\r\n                  );\r\n                }\r\n              )\r\n            }\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n  \r\n  function LocalMoment(element) {\r\n    let newDate = new Date(element.date);\r\n    return <Moment format = 'DD-MM-YYYY'>{newDate}</Moment>;\r\n  }\r\n  \r\nexport default ShowEvents;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n//import App from './App';\nimport ShowEvents from './ShowEvents';\n//import ShowEventsTest from './ShowEventsTest';\n//import AddTest from './AddTest';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <ShowEvents />,\n  document.getElementById('root'));\n    \n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
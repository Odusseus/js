{"version":3,"sources":["css/cs.module.css","common.js","EventDisplay.js","ShowEvents.js","serviceWorker.js","index.js"],"names":["module","exports","Common","dateString","undefined","elements","split","length","date","getDay","maxId","counter","EventDisplay","event","this","id","group","description","type","eventDate","Date","day","GetDay","ShowEvents","state","events","source","urlBase","key","token","window","location","href","includes","url","setState","fetch","then","res","json","data","values","JSON","parse","value","newEvents","today","setHours","forEach","element","eventDisplay","push","sort","a","b","catch","console","log","groupName","groupNameDisplay","map","className","styles","format","Component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qGACAA,EAAOC,QAAU,CAAC,MAAQ,kBAAkB,MAAQ,kBAAkB,GAAK,eAAe,KAAO,iBAAiB,IAAM,gBAAgB,YAAc,wBAAwB,KAAO,mB,+LCmBtKC,E,+GAnBYC,GACvB,QAAkBC,IAAfD,EACD,OAAO,KAGT,IAAIE,EAAWF,EAAWG,MAAM,KAChC,OAAuB,IAApBD,EAASE,OACH,KAEH,GAAN,OAAUF,EAAS,GAAnB,YAAyBA,EAAS,GAAlC,YAAwCA,EAAS,M,6BAGrCG,GAGZ,MAFa,CAAC,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YAEpEA,EAAKC,c,KCdrB,SAASC,IAMP,MAJ4B,oBAAjBA,EAAMC,UACbD,EAAMC,QAAU,GAEpBD,EAAMC,UACCD,EAAMC,Q,IAeAC,EAXb,WAAYC,GAAQ,oBAClBC,KAAKC,GAAKL,IACVI,KAAKE,MAAQH,EAAMG,MACnBF,KAAKN,KAAOK,EAAML,KAClBM,KAAKG,YAAcJ,EAAMI,YACzBH,KAAKI,KAAOL,EAAMK,KAClB,IAAIC,EAAY,IAAIC,KAAKP,EAAML,MAC/BM,KAAKO,IAAMnB,EAAOoB,OAAOH,I,gBCoFdI,E,2MA/FXC,MAAQ,CACNC,OAAS,GACTC,OAAQ,I,mFAGW,IAAD,OAEdC,EAAU,oCACVC,EAAM,uCACNC,EAAQ,uCAHDC,OAAOC,SAASC,KAIVC,SAAS,eACxBN,EAAU,wBACVC,EAAM,uCACNC,EAAQ,wCAEV,IAAIK,EAAMP,EAAU,oBAAsBC,EAAM,UAAYC,EAC5Df,KAAKqB,SAAS,CAAET,OAAQC,IACxBS,MAAMF,GACLG,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAACG,GACH,IAAIC,EAASC,KAAKC,MAAMH,EAAKI,OACzBC,EAAY,GACZC,EAAQ,IAAI1B,KAChB0B,EAAMC,SAAS,EAAE,EAAE,EAAE,GACrBN,EAAOO,SAAQ,SAAAC,GACb,GAAG,IAAI7B,KAAK6B,EAAQzC,OAASsC,EAAM,CACjC,IAAII,EAAe,IAAItC,EAAaqC,GACpCJ,EAAUM,KAAKD,OAGjBL,EAAUO,MACR,SAACC,EAAGC,GAAJ,OAEE,IAAIlC,KAAKiC,EAAE7C,MAAQ,IAAIY,KAAKkC,EAAE9C,SAGlC,EAAK2B,SAAS,CAAEV,OAAQoB,OAE7BU,MAAMC,QAAQC,O,+BAIjB,IAAIC,EAAY,KACZC,EAAmB,KACvB,OACE,oCACE,mDAAyB7C,KAAKU,MAAME,QACpC,6BAEMZ,KAAKU,MAAMC,OAAOmC,KAChB,SAAA/C,GAUE,OATG6C,IAAc7C,EAAMG,OACrB0C,EAAY7C,EAAMG,MAClB2C,EAAgB,cAAU9C,EAAMG,QAIhC2C,EAAmB,GAIpB,yBAAKE,UAAWC,IAAOjD,MAAOe,IAAKf,EAAME,IACxC,yBAAK8C,UAAWC,IAAO9C,OACpB2C,GAEH,yBAAKE,UAAWC,IAAO/C,IACpBF,EAAME,IAET,yBAAK8C,UAAWC,IAAOzC,KACpBR,EAAMQ,KAET,yBAAKwC,UAAWC,IAAOtD,MAEnB,kBAAC,IAAD,CAAQuD,OAAO,cACZlD,EAAML,OAIb,yBAAKqD,UAAWC,IAAO7C,aACpBJ,EAAMI,aAET,yBAAK4C,UAAWC,IAAO5C,MACpBL,EAAMK,gB,GApFJ8C,aCMLC,QACW,cAA7BnC,OAAOC,SAASmC,UAEe,UAA7BpC,OAAOC,SAASmC,UAEhBpC,OAAOC,SAASmC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrC,MAAK,SAAAsC,GACjCA,EAAaC,kB","file":"static/js/main.d3381a97.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"event\":\"cs_event__2tDr_\",\"group\":\"cs_group__1-hdn\",\"id\":\"cs_id__3BMVs\",\"date\":\"cs_date__1dYKo\",\"day\":\"cs_day__1PdK7\",\"description\":\"cs_description__3EtTf\",\"type\":\"cs_type__3nZ3J\"};","class Common {\r\n  static InverseDateString(dateString){\r\n    if(dateString === undefined){\r\n      return null;\r\n    }\r\n\r\n    let elements = dateString.split('-');\r\n    if(elements.length !== 3){\r\n      return null;\r\n    }\r\n    return `${elements[2]}-${elements[1]}-${elements[0]}`;\r\n  }\r\n\r\n  static GetDay(date){\r\n    const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\r\n    //let days = ['Zondag', 'Maandag', 'Dinsdag', 'Woensdag', 'Donderdag', 'Vrijdag', 'Zaterdag'];\r\n    return days[date.getDay()];\r\n  }\r\n}\r\n\r\nexport default Common;","import Common from './common.js';\r\n\r\nfunction maxId() {\r\n\r\n  if( typeof maxId.counter == 'undefined' ) {\r\n      maxId.counter = 0;\r\n  }\r\n  maxId.counter++;\r\n  return maxId.counter;\r\n}\r\n\r\nclass EventDisplay {\r\n  constructor(event) {\r\n    this.id = maxId();\r\n    this.group = event.group;\r\n    this.date = event.date;\r\n    this.description = event.description;\r\n    this.type = event.type;\r\n    let eventDate = new Date(event.date);\r\n    this.day = Common.GetDay(eventDate);\r\n  }\r\n}\r\n\r\nexport default EventDisplay;","/*jshint esversion: 6 */\r\nimport React, { Component } from 'react';\r\nimport Moment from 'react-moment';\r\nimport EventDisplay from './EventDisplay';\r\n\r\nimport styles from './css/cs.module.css'\r\nclass ShowEvents extends Component {\r\n\r\n    state = {\r\n      events : [],\r\n      source: \"\"\r\n    }\r\n\r\n    componentDidMount() {\r\n      let site = window.location.href;\r\n      let urlBase = \"https://www.odusseus.org/php/item\";\r\n      let key = \"4265AC3D-DD4B-427C-8BFD-6D7E7BB92C09\";\r\n      let token = \"DFAC7440-1A78-4612-AECD-E896759CD66D\";\r\n      if (true && site.includes(\"localhost\")){\r\n        urlBase = \"http://localhost:9000\";\r\n        key = \"4265AC3D-DD4B-427C-8BFD-6D7E7BB92C09\";\r\n        token = \"591FFE3A-7EF6-4F16-BCB4-880555820D6C\";\r\n      }\r\n      let url = urlBase + \"/getitem.php?key=\" + key + \"&token=\" + token;\r\n      this.setState({ source: urlBase });\r\n      fetch(url)\r\n      .then(res => res.json())\r\n      .then((data) => {\r\n          let values = JSON.parse(data.value);\r\n          let newEvents = [];\r\n          let today = new Date();\r\n          today.setHours(0,0,0,0);\r\n          values.forEach(element => {\r\n            if(new Date(element.date) >= today){\r\n              let eventDisplay = new EventDisplay(element);\r\n              newEvents.push(eventDisplay);\r\n            }            \r\n          });\r\n            newEvents.sort(\r\n              (a, b) => \r\n              ( \r\n                new Date(a.date) - new Date(b.date)\r\n                ));\r\n\r\n            this.setState({ events: newEvents });\r\n      })\r\n      .catch(console.log)\r\n\r\n    } \r\n  render() {\r\n    let groupName = null;\r\n    let groupNameDisplay = null;\r\n    return (\r\n      <>\r\n        <div>Events v1.1.4 from {this.state.source}</div>\r\n        <div>\r\n            {\r\n              this.state.events.map(\r\n                event => {                  \r\n                  if(groupName !== event.group){\r\n                    groupName = event.group;\r\n                    groupNameDisplay = `For ${event.group}`;\r\n                  }\r\n                  else\r\n                  {\r\n                    groupNameDisplay = '';\r\n                  }\r\n\r\n                  return (\r\n                   <div className={styles.event} key={event.id}>\r\n                    <div className={styles.group}>\r\n                      {groupNameDisplay}\r\n                    </div>\r\n                    <div className={styles.id}>\r\n                      {event.id}\r\n                    </div>\r\n                    <div className={styles.day}>\r\n                      {event.day}\r\n                    </div>\r\n                    <div className={styles.date}>\r\n                    {\r\n                        <Moment format='DD-MM-YYYY'>\r\n                          {event.date}\r\n                        </Moment>\r\n                    }\r\n                    </div>\r\n                    <div className={styles.description}>\r\n                      {event.description}\r\n                    </div>\r\n                    <div className={styles.type}>\r\n                      {event.type}\r\n                    </div>\r\n                  </div>\r\n                  );\r\n                }\r\n              )\r\n            }\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ShowEvents;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n//import App from './App';\nimport ShowEvents from './ShowEvents';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <ShowEvents />,\n  document.getElementById('root'));\n    \n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}